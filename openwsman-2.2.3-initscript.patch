diff -up openwsman-2.2.3/etc/init/openwsmand.sh.in.orig openwsman-2.2.3/etc/init/openwsmand.sh.in
--- openwsman-2.2.3/etc/init/openwsmand.sh.in.orig	2010-01-21 11:12:34.000000000 +0100
+++ openwsman-2.2.3/etc/init/openwsmand.sh.in	2011-01-04 13:40:48.591454091 +0100
@@ -4,28 +4,26 @@
 # Provides: openwsmand
 # Required-Start: $remote_fs
 # Required-Stop: $network
-# Default-Start: 2 3 4 5
-# Default-Stop: 0 1 6 
 # Short-Description: Openwsman Daemon
 # Description: openwsmand
 #       Start/Stop the Openwsman Daemon
 ### END INIT INFO
 #
 #
-# chkconfig: 2345 36 64
+# chkconfig: - 36 64
 # description: Openwsman Daemon
 # processname: openwsmand
 
 NAME=openwsmand
 DAEMON=/usr/sbin/$NAME
 OPTIONS=-S # with SSL
-PIDFILE=/var/run/$NAME.pid
+PIDFILE=/var/run/wsmand.pid
 
 lsb=0
 
 if [ $EUID != 0 ]; then
  echo "This script must be run as root."
- exit 1;
+ exit 4;
 fi
 
 if [ "$DESCRIPTIVE" = "" ]; then
@@ -56,20 +54,17 @@ start()
 	echo "Using common server certificate /etc/ssl/servercerts/servercert.pem"
 	ln -s /etc/ssl/servercerts/server{cert,key}.pem @SYSCONFDIR@
       else
-        echo "Generating Openwsman server public certificate and private key"
-	FQDN=`hostname --fqdn`
-	if [ "x${FQDN}" = "x" ]; then
-	  FQDN=localhost.localdomain
-	fi
-cat << EOF | sh @SYSCONFDIR@/owsmangencert.sh > /dev/null 2>&1
---
-SomeState
-SomeCity
-SomeOrganization
-SomeOrganizationalUnit
-${FQDN}
-root@${FQDN}
-EOF
+        echo "FAILED: Starting openwsman server"
+        echo "There is no ssl server key available for openwsman server to use."
+        echo -e "Please generate one with the following script and start the openwsman service again:\n"
+        echo "##################################"
+        echo "/etc/openwsman/owsmangencert.sh"
+        echo "================================="
+
+        echo "NOTE: The script uses /dev/random device for generating some random bits while generating the server key."
+        echo "      If this takes too long, you can replace the value of \"RANDFILE\" in @SYSCONFDIR@/ssleay.cnf with /dev/urandom. Please understand the     implications of replacing the RNADFILE."
+        exit 6 # Six means "program is not configured", seems to be suitable value
+
       fi
     fi
 
@@ -107,6 +102,9 @@ case "$1" in
     stop)
     	stop
 	rm -f $lockfile
+        # pid file should be removed by server itself, but it's marked as
+        # TODO in wsmand.c source file;)
+        rm -f $PIDFILE
     ;;
 
     restart)
@@ -141,12 +139,24 @@ case "$1" in
         echo "             running"
       else
         echo "             stopped"
+        if [ -e $PIDFILE ]; then
+          echo "             stopped, but pid file exists"
+          exit 1
+        elif [ -e $lockfile ]; then
+          echo "             stopped, but lock file exists"
+          exit 2
+        else
+          echo "             stopped"
+          exit 3
+        fi
       fi
     fi
     ;;
 
     *)
     echo "Usage: $0 {restart|start|stop|reload|force-reload|status}"
+    [ "$1" = "usage" ] && exit 0
+    exit 2
 esac
 
 if [ $lsb -ne 0 ]; then
